import casa.*


test "se rompe algo de 1000 , no esta en orden,viveres = 50" {
	casaDePepeYJulian.romper(1000)
	assert.that(casaDePepeYJulian.hayQueHacerReparaciones())
	assert.that(casaDePepeYJulian.hayViveresSuficientes())
	assert.notThat(casaDePepeYJulian.casaEnOrden())
}

test "cuenta vacia se depositan 1000 pesos, costo de operacion 20 pesos"{
	cuentaGastos.costoOperacion(20)
	cuentaGastos.depositar(1000)
	assert.equals(cuentaGastos.saldo() , 980)
}


test "100 pesos en la cuenta combinada , terminan en cuenta gastos ya que es primaria, quedando 50 pesos en total"{
	cuentaGastos.costoOperacion(50)
	cuentaCorriente.depositar(500)
	cuentaCombinada.cuentaPrimaria(cuentaGastos)
	cuentaCombinada.cuentaSecundaria(cuentaCorriente)
	cuentaCombinada.depositar(100)
	assert.equals(cuentaGastos.saldo() , 50)
}

test"Extraer 200 pesos, se extraen de la cuenta secundaria ya que la primaria no tiene lo suficiente, la cuenta 
	 corriente queda en 300 pesos"{
	cuentaGastos.costoOperacion(50)
	cuentaCorriente.depositar(500)
	cuentaCombinada.cuentaPrimaria(cuentaGastos)
	cuentaCombinada.cuentaSecundaria(cuentaCorriente)
	cuentaCombinada.extraer(200)
	assert.equals(cuentaCorriente.saldo() , 300)	
}

test "Saldo combinado es 350 pesos , 50 en cuenta gastos y 300 en corriente"{
	//no le puse costo de operacion para hacer mas sencillo el deposito
	cuentaGastos.depositar(50)
	cuentaCorriente.depositar(300)
	assert.equals(cuentaCombinada.saldo() , 350)
}


test"casa con 50% de viveres, necesita 100 pesos para reparaciones.Con cuenta corriente asociada de
	 1000 de saldo disponible con una estrategia de ahorro full."{
	casaDePepeYJulian.cantidadDeViveres(50)
	casaDePepeYJulian.romper(100)
	casaDePepeYJulian.cuentaBancaria(cuentaCorriente)
	cuentaCorriente.depositar(1000)
	casaDePepeYJulian.estrategiaDeAhorro(full)
	casaDePepeYJulian.mantenimiento()
	assert.equals(90 , casaDePepeYJulian.cantidadDeViveres())
	assert.equals(100, casaDePepeYJulian.montoReparacion())
	assert.equals(800 , cuentaCorriente.saldo())
	
}

test"casa con 20% de viveres , calidad de viveres 10 , Con cuenta corriente asociada de
	 1000 de saldo disponible con una estrategia de ahorro minimo e indispensable."{
	casaDePepeYJulian.cantidadDeViveres(20)
	minimoEIndispensable.calidadDeVivere(10)
	casaDePepeYJulian.cuentaBancaria(cuentaCorriente)
	cuentaCorriente.depositar(1000)
	casaDePepeYJulian.estrategiaDeAhorro(minimoEIndispensable)
	casaDePepeYJulian.mantenimiento()
	assert.equals(40 , casaDePepeYJulian.cantidadDeViveres())
	assert.equals(800 , cuentaCorriente.saldo())
}







